// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Launcher.h"
#include "../RobotMap.h"
#include "Commands/MoveArmCommand.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Launcher::Launcher() : Subsystem("Launcher") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftWheelMotor = RobotMap::launcherLeftWheelMotor;
    rightWheelMotor = RobotMap::launcherRightWheelMotor;
    armMotor = RobotMap::launcherArmMotor;
    launchMotor = RobotMap::launcherLaunchMotor;
    limitSwitchTop = RobotMap::launcherLimitSwitchTop;
    limitSwitchBottom = RobotMap::launcherLimitSwitchBottom;
    analogPotentiometer1 = RobotMap::launcherAnalogPotentiometer1;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Launcher::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void Launcher::MoveArm(std::shared_ptr<Joystick> joystick){
	if(joystick->GetRawAxis(2)!=0){
		Launcher::armMotor->Set(joystick->GetRawAxis(2));
	}
	else{
	Launcher::armMotor->Set(joystick->GetRawAxis(3));
	}
	armMotor->Set(joystick->GetRawAxis(2));
}
void Launcher::MoveKicker(std::shared_ptr<Joystick> joystick){
if(joystick->GetRawButton(2) == 1){
	Launcher::launchMotor->Set(1);
}
if(joystick->GetRawButton(3)== 1){
	Launcher::launchMotor->Set(-1);
}
}

