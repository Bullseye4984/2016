// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Joystick.h"
#include "Launcher.h"
#include "../RobotMap.h"
#include "Commands/MoveArmCommand.h"
#include "Commands/StartWheelsInwardCommand.h"
#include "Commands/MoveWheelsOutCommand.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Launcher::Launcher() : Subsystem("Launcher") {
	wheelIntakeSpeed = .5;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftWheelMotor = RobotMap::launcherLeftWheelMotor;
    rightWheelMotor = RobotMap::launcherRightWheelMotor;
    armMotor = RobotMap::launcherArmMotor;
    launchMotor = RobotMap::launcherLaunchMotor;
    limitSwitchTop = RobotMap::launcherLimitSwitchTop;
    limitSwitchBottom = RobotMap::launcherLimitSwitchBottom;
    analogPotentiometer1 = RobotMap::launcherAnalogPotentiometer1;
    launcherKickerTop = RobotMap::launcherKickerTop;
    launcherKickerBottom = RobotMap::launcherKickerBottom;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Launcher::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
	SetDefaultCommand(new MoveArmCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
/*
void Launcher::MoveArm(std::shared_ptr<Joystick> joystick){
	if(joystick->GetRawAxis(2)!=0){
		Launcher::armMotor->Set(joystick->GetRa
		wAxis(3));
	}
	else{
	Launcher::armMotor->Set(joystick->GetRawAxis(3));
	}
	if(joystick->GetRawAxis(3)>= 0.3){
	Launcher::armMotor->Set(joystick->GetRawAxis(3)*-1.0);
	//joystick->SetRumble(RumbleType.kLeftRumble, 1);
	//Robot::oi->robotOperator->SetRumble(RumbleType.1, 1.0);SetRumble(RumbleType kLeftRumble, 1.0);
	//SetRumble(RumbleType type, float value);
	}
	else if(joystick->GetRawAxis(2)>=.3){
	Launcher::armMotor->Set(joystick->GetRawAxis(2));
	}
	else{

		Launcher::armMotor->Set(0);
	}
}
*/
void Launcher::MoveArm(std::shared_ptr<Joystick> joystick){
	if(joystick->GetRawAxis(2) != 0)
	{
		MoveArmUp(joystick->GetRawAxis(2));
	}
	else
	{
		MoveArmDown(joystick->GetRawAxis(3) * -1);
	}
}
void Launcher::MoveArmUp(float input){
	if (RobotMap::launcherLimitSwitchTop->Get() == true)
	{
		armMotor->Set(input);
	}
	else
	{
	armMotor->Set(0);
	}
}
void Launcher::MoveArmDown(float input){

	if(RobotMap::launcherLimitSwitchBottom->Get() == true){
	armMotor->Set(input);
		}
		else
		{

		armMotor->Set(0);
		}
	}

void Launcher::MoveKicker(std::shared_ptr<Joystick> joystick){
	if(joystick->GetRawAxis(1) >=0)
	{
		MoveKickerUp(joystick->GetRawAxis(1));
	}
	else
	{
		MoveKickerDown(joystick->GetRawAxis(1));
	}

}
void Launcher::MoveKickerUp(float input){
	if (RobotMap::launcherKickerTop->Get() == true){
		launchMotor->Set(input);
	}
	else
	{
		launchMotor->Set(0);
	}
}
void Launcher::MoveKickerDown(float input){

	if(RobotMap::launcherKickerBottom->Get() == true){
		launchMotor->Set(input);
		}
		else
		{
		launchMotor->Set(0);
		}
	}



void Launcher::Reset(){
	while(RobotMap::launcherKickerBottom->Get() == true){
			launchMotor->Set(-0.25);
		}
}

//wheels code
void Launcher::MoveWheelsOut(){
		Launcher::leftWheelMotor->Set(-1);
		Launcher::rightWheelMotor->Set(1);
}
void Launcher::MoveWheelsIn(){
	wheelIntakeSpeed = .6;
		Launcher::leftWheelMotor->Set(.75);
		Launcher::rightWheelMotor->Set(-.75);
}
void Launcher::StopWheels(){
	leftWheelMotor->Set(0);
	rightWheelMotor->Set(0);
}
