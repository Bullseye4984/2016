// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef LAUNCHER_H
#define LAUNCHER_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "time.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Launcher: public Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	int wheelIntakeSpeed;
	std::shared_ptr<DigitalInput> limitSwitchTop;
	std::shared_ptr<DigitalInput> limitSwitchBottom;
	std::shared_ptr<AnalogPotentiometer> analogPotentiometer1;
	std::shared_ptr<DigitalInput> launcherKickerBottom;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public:
	Launcher();
	void InitDefaultCommand();
	std::shared_ptr<SpeedController> launchMotor;
	std::shared_ptr<SpeedController> armMotor;
	std::shared_ptr<DigitalInput> launcherKickerTop;
	void MoveArm(std::shared_ptr<Joystick> joystick);
	void MoveKicker(std::shared_ptr<Joystick> joystick);
	void MoveArmDown(float input);
	void MoveArmUp(float input);
	void MoveWheelsIn();
	void MoveWheelsOut();
	void StopWheels();
	bool Shoot();
	void Reset();
	void MoveKickerDown(float input);
	void MoveKickerUp(float input);
	void wait (int seconds);
	std::shared_ptr<SpeedController> leftWheelMotor;
	std::shared_ptr<SpeedController> rightWheelMotor;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
};

#endif
