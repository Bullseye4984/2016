// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "DriveTrain.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/TrimUpCommand.h"
#include "../Commands/TrimDownCommand.h"
#include "../Commands/TankDriveCommand.h"
#include "../Commands/AutonomousCommand.h"
#include "../Commands/AutonomouseGroup1.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveTrain::DriveTrain() : Subsystem("DriveTrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    rightMotor = RobotMap::driveTrainRightMotor;
    leftMotor = RobotMap::driveTrainLeftMotor;
    driveMotors = RobotMap::driveTrainDriveMotors;
    leftMotorEncoder = RobotMap::driveTrainLeftMotorEncoder;
    rightMotorEncoder = RobotMap::driveTrainRightMotorEncoder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    motorTrim = 1.0;
    trimDeviation = 0.2;
}

void DriveTrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new TankDriveCommand());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void DriveTrain::TankDrive(std::shared_ptr<Joystick> joystick){
 	TankDrive(joystick->GetRawAxis(1), joystick->GetRawAxis(5));

 }
 void DriveTrain::TankDrive(float left, float right){
 	driveMotors->TankDrive((left *motorTrim*-1), right*motorTrim*-1);
 }
 bool DriveTrain::TrimUp(){
	 if(motorTrim<=(1.0-(trimDeviation)*-1)){

		 motorTrim = motorTrim + trimDeviation;
	 }
	 return true;
 }
 bool DriveTrain::TrimDown(){

	 if(motorTrim>=(0+trimDeviation)){
		 motorTrim= motorTrim-trimDeviation;
	 }
	 return true;
 }
